import { c as createBase64WorkerFactory } from '../../../../rollup-plugin-web-worker-loader__helper__browser__createBase64WorkerFactory.js';

var WorkerFactory = createBase64WorkerFactory('', null, false);
/* eslint-enable */

export { WorkerFactory as W };
